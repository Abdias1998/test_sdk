/**
 * SDK Configuration options
 */
interface FeexpayOptions {
    /** API mode - sandbox or production */
    mode?: 'sandbox' | 'LIVE';
    /** Request timeout in milliseconds */
    timeout?: number;
    /** Maximum retry attempts */
    maxRetries?: number;
}
/**
 * Payment creation parameters
 */
interface CreatePaymentParams {
    /** Payment amount in smallest currency unit */
    amount: number;
    /** Customer information */
    shop?: string;
    callback_info?: string;
    phoneNumber?: string;
    motif?: string;
    network?: string;
    /** Optional metadata */
    metadata?: Record<string, any>;
}
/**
 * Payment verification response
 */
interface PaymentVerification {
    status: 'PENDING' | 'SUCCESSFUL' | 'FAILED';
    amount: number;
    currency: string;
    transactionId: string;
    metadata?: Record<string, any>;
}
/**
 * Custom error types
 */
declare class FeexpayError extends Error {
    code: string;
    constructor(message: string, code: string);
}
declare class NetworkError extends FeexpayError {
    constructor(message: string);
}
declare class APIError extends FeexpayError {
    status: number;
    constructor(message: string, status: number);
}
declare class ValidationError extends FeexpayError {
    constructor(message: string);
}

declare class Core {
    private readonly token;
    private readonly client;
    private readonly options;
    private readonly id;
    constructor(token: string, id: string, options?: FeexpayOptions);
    /**
     * Makes an HTTP request with retry logic
     * @private
     */
    protected _makeRequest<T>(method: string, endpoint: string, data?: any, retryCount?: number): Promise<T>;
}

declare class PaymentService extends Core {
    /**
     * Create a new payment
     * @param params Payment creation parameters
     * @returns Payment creation response
     * @example
     * ```typescript
     * const payment = await feexpay.payment.create({
     *   amount: 5000,
     *   currency: 'XOF',
     *   customer: {
     *     email: 'customer@example.com',
     *     name: 'John Doe'
     *   },
     *   callback_url: 'https://example.com/callback'
     * });
     * ```
     */
    create(params: CreatePaymentParams): Promise<any>;
    /**
     * Verify payment status
     * @param transactionId Payment transaction ID
     * @returns Payment verification response
     * @example
     * ```typescript
     * const status = await feexpay.payment.verify('tx_123456');
     * ```
     */
    verify(transactionId: string): Promise<PaymentVerification>;
}

declare class WebhooksService {
    /**
     * Verify webhook signature
     * @param payload Raw webhook payload
     * @param signature Signature from X-Feexpay-Signature header
     * @param secret Webhook secret key
     * @returns boolean
     * @example
     * ```typescript
     * const isValid = feexpay.webhooks.verifySignature(
     *   payload,
     *   signature,
     *   'whsec_...'
     * );
     * ```
     */
    verifySignature(payload: string, signature: string, secret: string): boolean;
    /**
     * Parse webhook event
     * @param payload Webhook payload
     * @returns Parsed event object
     * @example
     * ```typescript
     * const event = feexpay.webhooks.parseEvent(payload);
     * ```
     */
    parseEvent(payload: string): any;
}

/**
 * Feexpay SDK main class
 * @example
 * ```typescript
 * const feexpay = new Feexpay('your-api-key', {
 *   mode: 'sandbox',
 *   timeout: 30000
 * });
 * ```
 */
declare class Feexpay {
    readonly payment: PaymentService;
    readonly webhooks: WebhooksService;
    constructor(token: string, id: string, options?: FeexpayOptions);
}

export { APIError, type CreatePaymentParams, Feexpay, FeexpayError, type FeexpayOptions, NetworkError, type PaymentVerification, ValidationError };
